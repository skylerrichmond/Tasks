start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_selection(
strength_AA = 0,
strength_Aa = 1, 
strength_aa = 0,
strength_A = NULL,
population = 2,
time = '1',
start = TRUE,
start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(array(c(2,5)))
sumstat_nucleotide_div() +
sumstat_trees() 
activate_ms(priority = 100)
activate_msms(priority = 500, download = TRUE)
model4 <- coal_model(c(13, 18), loci_number = 10, loci_length = 1000, ploidy = 2) +
feat_selection(10, time = 1, population = 1) +
feat_selection(25, time = 1, population = 2) +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
check_model(model4)
list_simulators()
activate_scrm(priority = 400)
stat2 <- simulate(model4) 
stat2 <- simulate(model4, nsim = 40)
Diversity2 <- stat2$pi
q()
source("https://jonsmitchell.com/code/reformatData07.R")
source("https://jonsmitchell.com/code/simFxn.R")
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
dYear <- c()
dAlleles <- c()
for(i in 3:ncol(overalFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
]
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
source("https://jonsmitchell.com/code/reformatData07.R")
source("https://jonsmitchell.com/code/simFxn.R")
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
dYear <- c()
dAlleles <- c()
for(i in 3:ncol(overalFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
}
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
q()
setwd('~/Desktop/Evolution/Tasks/Task_07')
library(phytools)
library(ape)
text.string <-
'(((((((cow, pig), whale),(bat,(lemur, human))), (robin, iguana)), coelacanth
), (gold_fish, trout)), shark);'
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame='circle', bg='white', cex=1)
Question 1: The goldfish is more closely related to a shark than a human.
vert.tree
Question 2: No, there are no branch lengths in this tree. 
str(vert.tree)
tree <- read.tree(text='(((A,B), (C,D)), E);')
plotTree(tree, offset=1)
tiplabels(frame='circle', bg='lightblue', cex=1)
nodelabels(frame='circle', bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree('https://jonsmitchell.com/data/anolis.tre'))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
tipEdges
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
?plot.phylo
Question 3:
tree <- read.tree(text='(((A, B), (C, D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='red')
Question 4:
plot.phylo(tree, type='radial')
Question 5:
plot.phylo(tree, tip.color = 'red')
Question6-8: Anolis occultis
plot(AnolisTree, cex=0.25) had the shortest edge length.
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths == min(Lengths))
names(Lengths)
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
setwd('~/Desktop/Evolution/Tasks/Task_07')
library(phytools)
library(ape)
text.string <-
'(((((((cow, pig), whale),(bat,(lemur, human))), (robin, iguana)), coelacanth
), (gold_fish, trout)), shark);'
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame='circle', bg='white', cex=1)
Question 1: The goldfish is more closely related to a shark than a human.
vert.tree
Question 2: No, there are no branch lengths in this tree. 
str(vert.tree)
tree <- read.tree(text='(((A,B), (C,D)), E);')
plotTree(tree, offset=1)
tiplabels(frame='circle', bg='lightblue', cex=1)
nodelabels(frame='circle', bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree('https://jonsmitchell.com/data/anolis.tre'))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
tipEdges
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
?plot.phylo
Question 3:
tree <- read.tree(text='(((A, B), (C, D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='red')
Question 4:
plot.phylo(tree, type='radial')
Question 5:
plot.phylo(tree, tip.color = 'red')
Question6-8: Anolis occultis
plot(AnolisTree, cex=0.25) had the shortest edge length.
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths == min(Lengths))
names(Lengths)
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
tree <- read.tree(text='(((A, B), (C, D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='red')
Question 4:
plot.phylo(tree, type='radial')
Question 5:
plot.phylo(tree, tip.color = 'red')
Question6-8: Anolis occultis had the shortest edge length.
plot(AnolisTree, cex=0.25) 
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths == min(Lengths))
names(Lengths)
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
The line never goes down because it is increasing until tje slope hits a plateau meaning that the lizards will reach an asymptote eventually but increase until then. 
fit.bd(AnolisTree, rho = 0.2)
install.packages('treebase')
library('treebase')
library('ape')
Dolphins <- search_treebase("Delphinus", by='taxon', max_trees = 10)
WillWork <- sapply(Dolphins, function(x) try(is.ultrametric(x)))
which(WillWork == TRUE)
pdf('r07_DolphinPhylogeny.pdf', height =5, width=5)
DolphinPlot <- plot.phylo(Dolphins[[9]], cex = 0.35)
dev.off()
is.ultrametric(Dolphins[[7]])
bddolphin <- fit.bd(Dolphins[[7]], rho = 0.2)
bddolphin
b = 0.67 d= 0.59
Tigers <- search_treebase("Tigris", by='taxon', max_trees=3)
WillWork <- sapply(Tigers, function(x) try(is.ultrametric(x)))
pdf('r07_TigerPhylogeny.pdf', height =5, width=5)
TigersPlot <- plot.phylo(Tigers[[2]], cex=0.1)
dev.off()
bdtigers <- fit.bd(Tigers[[2]], rho = 0.2)
bdtigers
b = 0.67 d= 0.62
Warblers <- search_treebase("Basileuterus", by='taxon', max_trees=20)
length(Warblers)
pdf('r07_WarblerPhylogeny.pdf', height =5, width=5)
WarblersPlot <- plot.phylo(Warblers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Warblers, function(x) try(is.ultrametric(x)))
bdwarblers <- fit.bd(Warblers[[1]], rho =0.2)
bdwarblers
b = 1.08 d= 0.90
Elephants <- search_treebase('elephas', by='taxon', max_trees=25)
setwd('~/Desktop/Evolution/Tasks/Task_07')
library(phytools)
library(ape)
text.string <-
'(((((((cow, pig), whale),(bat,(lemur, human))), (robin, iguana)), coelacanth
), (gold_fish, trout)), shark);'
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame='circle', bg='white', cex=1)
Question 1: The goldfish is more closely related to a shark than a human.
vert.tree
Question 2: No, there are no branch lengths in this tree. 
str(vert.tree)
tree <- read.tree(text='(((A,B), (C,D)), E);')
plotTree(tree, offset=1)
tiplabels(frame='circle', bg='lightblue', cex=1)
nodelabels(frame='circle', bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree('https://jonsmitchell.com/data/anolis.tre'))
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main='', xlab='edge lengths for Anolis tree', ylim=c(0,50), xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
tipEdges
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, cex=0.25)
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
?plot.phylo
Question 3:
tree <- read.tree(text='(((A, B), (C, D)), E);')
plot.phylo(tree, type='phylogram', show.tip.label=FALSE, edge.color='red')
Question 4:
plot.phylo(tree, type='radial')
Question 5:
plot.phylo(tree, tip.color = 'red')
Question6-8: Anolis occultis had the shortest edge length.
plot(AnolisTree, cex=0.25) 
Labs <- sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
which(Lengths == min(Lengths))
names(Lengths)
AnolisTree2 <- drop.tip(AnolisTree, 'Anolis_occultus')
plot(AnolisTree2, cex=0.25)
ltt(AnolisTree)
abline(0, 1, lwd=2, col='red', lty=2)
The line never goes down because it is increasing until the slope hits a plateau meaning that the lizards will reach an asymptote eventually but increase until then. 
fit.bd(AnolisTree, rho = 0.2)
install.packages('treebase')
library('treebase')
library('ape')
Warblers <- search_treebase("Basileuterus", by="taxon", max_trees=20)
length(Warblers)
pdf("r07-WarblerPhylo.pdf", height=5, width=5)
WarblersPlot <- plot.phylo(Warblers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Warblers, function(x) try(is.ultrametric(x)))
WillWork
bdwarblers <- fit.bd(Warblers[[1]], rho=0.2)
bdwarblers
b=15.4316 d=8.0977
Skinks <- search_treebase("Dasia", by="taxon", max_trees=20)
length(Skinks)
pdf("r07-SkinksPhylo.pdf", height=5, width=5)
SkinksPlot <- plot.phylo(Skinks[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Skinks, function(x) try(is.ultrametric(x)))
WillWor
bdskinks <- fit.bd(Warblers[[1]], rho=0.2)
bdskinks
b=15.4316 d=8.0977
TreeFrogs <- search_treebase("Hyla", by="taxon", max_trees=20)
length(TreeFrogs)
pdf("r07-TreeFrogsPhylo.pdf", height=5, width=5)
TreeFrogsPlot <- plot.phylo(TreeFrogs[[1]], cex=0.35)
dev.off()
WillWork <- sapply(TreeFrogs, function(x) try(is.ultrametric(x)))
WillWork
bdTreeFrogs <- fit.bd(TreeFrogs[[1]], rho=0.2)
bdTreeFrogs
Skinks <- search_treebase("Dasia", by="taxon", max_trees=20)
length(Skinks)
pdf("r07-SkinksPhylo.pdf", height=5, width=5)
SkinksPlot <- plot.phylo(Skinks[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Skinks, function(x) try(is.ultrametric(x)))
WillWork
bdskinks <- fit.bd(Warblers[[1]], rho=0.2)
bdskinks
install.packages("treebase")
library("treebase")
library("ape")
Elephants <- search_treebase("Elephas", by="taxon", max_trees=20)
length(Elephants)
pdf("r07-WarblerPhylo.pdf", height=5, width=5)
ElephantsPlot <- plot.phylo(Elephants[[1]], cex=0.35
dev.off()
WillWork <- sapply(Elephants, function(x) try(is.ultrametric(x)))
WillWork
bdElephants <- fit.bd(Elephants[[1]], rho=0.2)
bdElephants
Warblers <- search_treebase("Basileuterus", by="taxon", max_trees=20)
length(Warblers)
pdf("r07-WarblerPhylo.pdf", height=5, width=5)
WarblersPlot <- plot.phylo(Warblers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Warblers, function(x) try(is.ultrametric(x)))
WillWork
bdwarblers <- fit.bd(Warblers[[1]], rho=0.2)
bdwarblers
b=15.4316 d=8.0977
Elephants <- search_treebase("Elephas", by="taxon", max_trees=20)
length(Elephants)
pdf("r07-ElephantPhylo.pdf", height=5, width=5)
ElephantsPlot <- plot.phylo(Elephants[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Elephants, function(x) try(is.ultrametric(x)))
WillWork
bdElephants <- fit.bd(Elephants[[1]], rho=0.2)
bdElephants
pdf("r07-ElephantPhylo.pdf", height=5, width=5)
Monkeys <- search_treebase("Guenon", by="taxon", max_trees=20)
length(Monkeys)
pdf("r07-MonkeysPhylo.pdf", height=5, width=5)
MonkeysPlot <- plot.phylo(Monkeys[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Monkeys, function(x) try(is.ultrametric(x)))
WillWork
bdMonkeys <- fit.bd(Monkeys[[1]], rho=0.2)
bdMonkeys
Primates <- search_treebase("Cheirogaleus", by="taxon", max_trees=20)
length(Primates)
pdf("r07-PrimatesPhylo.pdf", height=5, width=5)
PrimatesPlot <- plot.phylo(Primates[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Primates, function(x) try(is.ultrametric(x)))
WillWork
bdPrimates <- fit.bd(Primates[[1]], rho=0.2)
bdPrimates
Tigers <- search_treebase("Tigris", by="taxon", max_trees=20)
length(Tigers)
pdf("r07-TigersPhylo.pdf", height=5, width=5)
TigersPlot <- plot.phylo(Tigers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Tigers, function(x) try(is.ultrametric(x)))
WillWork
bdTigers <- fit.bd(Tigers[[1]], rho=0.2)
bdTigers
Tigers <- search_treebase("Tigris", by="taxon", max_trees=20)
length(Tigers)
pdf("r07-TigersPhylo.pdf", height=5, width=5)
TigersPlot <- plot.phylo(Tigers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Tigers, function(x) try(force.ultrametric(x)))
WillWork
bdTigers <- fit.bd(Tigers[[1]], rho=0.2)
bdTigers
Lions <- search_treebase("Panthera", by="taxon", max_trees=20)
length(Lions)
pdf("r07-LionsPhylo.pdf", height=5, width=5)
LionsPlot <- plot.phylo(Lions[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Lions, function(x) try(is.ultrametric(x)))
WillWork
bdLions <- fit.bd(Lions[[1]], rho=0.2)
bdLions
Chickens <- search_treebase("Junglefowl", by="taxon", max_trees=20)
length(Chickens)
pdf("r07-ChickensPhylo.pdf", height=5, width=5)
ChickensPlot <- plot.phylo(Chickens[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Chickens, function(x) try(is.ultrametric(x)))
WillWork
bdChickens <- fit.bd(Chickens[[1]], rho=0.2)
bdChickens
Dogs <- search_treebase("Canus", by="taxon", max_trees=20)
length(Dogs)
pdf("r07-DogsPhylo.pdf", height=5, width=5)
DogsPlot <- plot.phylo(Dogs[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Dogs, function(x) try(is.ultrametric(x)))
WillWork
bdDogs <- fit.bd(Dogs[[1]], rho=0.2)
bdDogs
Pandas <- search_treebase("Panthera", by="taxon", max_trees=20)
length(Pandas)
pdf("r07-PandasPhylo.pdf", height=5, width=5)
PandasPlot <- plot.phylo(Pandas[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Pandas, function(x) try(is.ultrametric(x)))
WillWork
bdPandas <- fit.bd(Pandas[[1]], rho=0.2)
q()
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Tasks\\Task_11')
x<-rnorm(100, mean=5, sd=2)
var(x)
mean(x)
y<-((x*5)+2)runif(100, 0, 0.1)
pdf("1.pdf", height=4, width=4)
plot(x,y)
abline(lm(y~x), col='purple')
dev.off()
coef(lm(y~x))
The interecept is at x=4.999 y=2.053 because numbers are rarely exact and are generally rounded.
 z<-c()
 x<-rnorm(100, mean=5, sd=2)
 for(i in 1:100) {
 z[i]<-runif(1)
 y<-(x*z[i]) +2 +(rnorm(100, 0:0.1))
 l<-coef(lm(z[1:100]~y))
 }
 pdf("2.pdf", height=4, width=4)
 plot(z[1:100], y)
 abline(lm(y~z[1:100]))
 dev.off()
 pdf("3.pdf", height=4, width=4)
 plot(x(z, -0.03))
 dev.off()
 innstall.packages("meme")
 library('meme')
 dir()
 u<-'https://imgur.com/t/frodo/XdKFw0t'
 memelol<- meme(u, higher="Looking at coding I made a month ago", col='white', size='1.5')
dev.off()
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Tasks\\Task_11')
x<- rnorm(100, mean=5, sd=2)
x
var(x)
mean(x)
y<-(x *5) + 2 + (rnorm(100, 0, 0.1))
y
pdf("1.pdf", height=4, width=4)
plot(x,y)
abline(lm(y~x), col='purple')
coef(lm(y~x))
dev.off()
z<-c()
x<- rnorm(100, mean=5, sd=2)
for(i in 1:100) {
 z[i]<-runif(1)
 y<- (x* z[i]) + 2 +(rnorm(100, 0:0.1))
 l<-coef(lm(z[1:100]~y))
 }
 pdf("2.pdf", height=4, width=4)
 plot(z[1:100], y)
 abline(lm(y~z[1:100]))
 dev.off()
 pdf("3.pdf", height=4, width=4)
 plot(c(z, -0.03))
 dev.off()
 innstall.packages("meme")
 library('meme')
 dir()
install.packages("meme")
library('meme')
dir()
u<-'https://imgur.com/t/frodo/XdKFw0t'
memelol<- meme(u, higher="Looking at coding I made a month ago", col='white', size='1.5')
dev.off()u<-'https://imgur.com/t/frodo/XdKFw0t'
memelol<- meme(u, higher='Looking at coding I made a month ago', col='white', size='1.5')
dev.off()u<-'https://imgur.com/t/frodo/XdKFw0t'
memelol<- meme(u, lower='Looking at coding I made a month ago', col='white', size='1.5')
q()
