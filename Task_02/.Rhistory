install.packages("swirl")
q()
library(swirl)
swirl()
5+7
x <- 5+7.
x
y <- x-3.
y
z <- c(1.1,9,3.14).
z <-c(1.1,9,3.14).
z <- c (1.1,9,3.14).
c(1.1,9,3.14).
z <- c (1.1, 9, 3.14).
z <- c(1.1, 9, 3.14).
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
z*2+100
my_sqrt <- sqrt(z-1)
skip()
my_div <- z/my_sqrt
skip()
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
q()
install.packages("swirl")
q()
library(swirl)
swirl()
5+7
x <- 5+7.
x
y <- x-3.
y
z <- c(1.1,9,3.14).
z <-c(1.1,9,3.14).
z <- c (1.1,9,3.14).
c(1.1,9,3.14).
z <- c (1.1, 9, 3.14).
z <- c(1.1, 9, 3.14).
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
z*2+100
my_sqrt <- sqrt(z-1)
skip()
my_div <- z/my_sqrt
skip()
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
q()
swirl()
library(swirl)
swirl()
{num/ by=2 %%}
submit()
submit()
submit()
?
info()
?remainder
?increment
submit()
(num, by=2) {num/by %%}
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8.8))
?evaluate
??evaluate
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(x, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(func(x), c(8, 4, 0))
evaluate(function(x),8)
evaluate(function(x),{8})
evaluate(function(x),{8},c(8, 4, 0))
evaluate(function(x),{8}, x)
evaluate(function(x){8})
evaluate(function(x){8}, x)
evaluate(function(x){"8"}, x)
evaluate(function('x'){"8"})
evaluate(function("x"){8})
evaluate(function("x"){"8"})
evaluate(function(x){"8"}, "x")
evaluate(function(x){"8"}, 'x')
evaluate(function(x){c("8")}, x)
evaluate(function('x'){c("8")})
evaluate(function(x){c("8")})
evaluate(function(x){c(8)})
evaluate(function(x)){c(""8", "4", "0")}
evaluate(function(x)){c("8", "4", "0")}
evaluate(function(x)){c("8")}
evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){"8"})
evaluate(function(x){"8"})
?index
?vector
?index vector
?index.vector
evaluate(function(x){c("8")})
evaluate(function(x){c(8)})
evaluate(function(x){c("8", "4", "0")})
bye()
swirl()
evaluate('x'){"8"}
evaluate(function(x){"8"}, c(8, 4, 0))
evaluate(function("x"){"8"}, c(8, 4, 0))
evaluate(function("x"){"8"}, c("8", "4", "0"))
evaluate(function(x){"8"}, c("8", "4", "0"))
evaluate(function(x){x[1]}, c("8", "4", "0"))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[last]}, c(8, 4, 0))
evaluate(function(x){x[last 1]}, c(8, 4, 0))
evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[length(vec)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
bye()
swirl()
submit()
submit()
telegram <- function(...) {paste("START", ..., "STOP"}
submit()
submit()
telegram(c("Hello", "everyone"))
submit()
submit()
mad_libs(place= "Brazil", adjective= "pretty", noun= "girl")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(data(cars))
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab= "Speed")
plot(x=cars$speed, y=cars$dist, ylab= "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xLab="Speed", ylab= "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xLab="Speed", ylab= "Stopping Distance")
plot(x+cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
q()
unique(beren3$event)
setwd(beren3)
setwd(beren4)
head(beren3)
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Tasks\\Task_02')
unique(beren3$event)
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Tasks\\Task_02')
Data<- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
write.csv(Data, 'rawdata.csv', quote=F)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
Feeds<- which(Data[,9] =='bottle')
berenMilk <-Data[Feeds,]
head(berenMilk)
Feeds<- which(Data[,'event'] == 'bottle')
Feeds<- which(Data$event == 'bottle')
dayID <-apply(Data, 1, function(x) paste(x[1:3], collapse='-'))
dateID <-sapply(dayID, as.Date, format= "%Y-%m-%d", origin ="2019-04-18")
Data$age<- dateID - dateID[which(Data$event == 'birth')]
head(Data)
beren2<- Data
beren3<-beren2[order(beren2$age),]
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
setwd(beren3)
Feeds<- which(beren3$event =="bottle")
avgMilk<- mean(beren3$value[Feeds])
avgFeed<- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed<-tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed<- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds<-tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds, beren3$age[Feeds])
beren <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)
dayID <- apply(beren, 1, function(x) paste(x[1:3], collapse="-"))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
beren$age <- dateID - dateID[which(beren$event == "birth")]
beren2 <- beren[order(beren$age),]
beren2$value <- as.numeric(beren2$value)
beren3<-beren2
unique(beren3$event)
q()
