evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){c("8")}, c(8,4,0)
evaluate(function(x){"8"})
evaluate(function(x){"8"})
?index
?vector
?index vector
?index.vector
evaluate(function(x){c("8")})
evaluate(function(x){c(8)})
evaluate(function(x){c("8", "4", "0")})
bye()
swirl()
evaluate('x'){"8"}
evaluate(function(x){"8"}, c(8, 4, 0))
evaluate(function("x"){"8"}, c(8, 4, 0))
evaluate(function("x"){"8"}, c("8", "4", "0"))
evaluate(function(x){"8"}, c("8", "4", "0"))
evaluate(function(x){x[1]}, c("8", "4", "0"))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[last]}, c(8, 4, 0))
evaluate(function(x){x[last 1]}, c(8, 4, 0))
evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[length(vec)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
bye()
swirl()
submit()
submit()
telegram <- function(...) {paste("START", ..., "STOP"}
submit()
submit()
telegram(c("Hello", "everyone"))
submit()
submit()
mad_libs(place= "Brazil", adjective= "pretty", noun= "girl")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(data(cars))
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab= "Speed")
plot(x=cars$speed, y=cars$dist, ylab= "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xLab="Speed", ylab= "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xLab="Speed", ylab= "Stopping Distance")
plot(x+cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab= "Speed", ylab="Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
q()
trueMean1<-5 
trueSD1<- 5
poopulation1<- rnorm(1e6, trueMean1, trueSD1)
trueMean2<- 4
trueSD2 <-5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2<- sample(population2, Size)
population1<- rnorm(1e6, trueMean1, trueSD1)
Sample1 <- sample(population1, Size)
head(Sample1)
head(Sample2)
population2
population1
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn.04.R")
MatGrandma<- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
source("http://jonsmitchell.com/code/simFxn.04.R")
q()
trueMean1<-5 
trueSD1<- 5
trueMean2<- 4
trueSD2 <-5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2<- sample(population2, Size)
head(Sample1)
head(Sample2)
population2
population1
The samples are different from one another which makes sense considering the populations are different from one another. 
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn.04.R")
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma<- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
head(MatGrandpa)
head(MatGrandma)
head(PatGrandpa)
head(PatGrandma)
Alan<- makeBaby(PatGrandma, PatGrandpa)
head(Alan)
Brenda<- makeBaby(MatGrandma, MatGrandpa)
head(Brenda)
Focus<- makeBaby(Brenda, Alan)
Focus<- makeBaby(Brenda, Alan)
ToMom<- length( grep("mom", Focus) )/ length( Focus )
ToMomMom<- length( grep("grandma_mom", Focus) )/ length( Focus )
ToMomDad<- length( grep("grandpa_mom", Focus) )/ length( Focus )
head(ToMom)
head(ToMomMom)
head(ToMomDad)
ToDadMom<- length( grep("grandma_da", Focus) )/ length( Focus )
ToDadDad<- length( grep("grandpa_da", Focus) )/ length( Focus )
head(ToDadMom)
head(ToDadDad)
Sibling_01<- makeBaby(Brenda, Alan)
ToSib<- length( intersect( Focus, Sibling_01) ) / length( Focus )
head(ToSib)
ManySiblings<- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan)))/length( Focus ))
head(ManySiblings)
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main- "", xlab="proportion shared genes")
plot(density(ManySiblings), main= "", xlab="proportion shared genes")
HWE<- function(p) {
aa <-p^2
ab<-2 * p * (1-p)
bb<- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1,1,type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from=0, to =1, by =0.1)
GenoFreq<- t(sapply(p, HWE))
lines(p,GenoFreq[,"aa"], lwd=2, col="red")
lines(p,GenoFreq[,"ab"], lwd=2, col="purple")
lines(p,GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple", "blue"), lty=1, lwd=2, bty="n")
Pop<- simPop(500)
points(Pop[, "freqa"], Pop[,"Genotypes.aa"]/500, pch-21, bg="red")
points(Pop[, "freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop<-simPop(50)
points(Pop[, "freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
learnPopGen()
learnPopGen()
library(learnPopGen)
learnPopGen()
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)
x<-genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes<-5:50
Samples<- rep(PopSizes, 5)
tExt<- sapply(Samples, function(x) nrow(simPop(x,5 00)))
tExt<- sapply(Samples, function(x) nrow(simPop(x,500)))
Line<- lm(tExt~ Samples)
summary(Line)
line$coef
plot(Samples, tExt)
abline(Line)Line$coef
plot(Samples, tExt)
abline(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2<- lm(tExt ~ Samples +0)
summary(Line2)
summary(Line)
install.packages(robustbase)
install.packages("robustbase")
install.packages("tidyverse")
install.packages("sandwich")
install.packages("lmtest")
install.packages("modelr")
install.packages("broom")install.packages("sandwich")
install.packages("broom")
Data(Line2)
data(Line2)
summary(Line2)
library(lmtest)
library(lmtest)
summary(Line2)
Line3<-lmrob(tExt ~Samples)
install.packages("robustbase")
Line3<-lmrob(tExt ~Samples)
summary(lmfit)\
summary(lmfit)
nstall.packages("robustbase")
install.packages("tidyverse")
install.packages("sandwich")
install.packages("lmtest")
install.packages("modelr")
install.packages("broom")
summary(lmfit)
bptest(Line)
bptest(Line2)
coeftest(Line, vcov= vcovHC(Line))
coeftest(Line, vcov= vcovHC(Line))
Line3<-lmrob(tExt~Samples)
summary(Line3)
plot(Samples, tExt)
abline(Line)
abLine(Line3)
pdf("r03exc-RobustHeteroskedasticity.pdf", height-5, width=5)
plot(Samples, tExt)
abLine(Line, col="blue")
abLine(Line3, col="purple")
legend(x=20, y=400, legend=c('Robust', 'Linear'), col=c('blue', 'purple'), lwd=1.2, cex=0.8)
dev.off()
q()
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
hist (Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
plot (1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis (2, at = 1:length(backgrounds), labels = backgrounds)
mtext (side=1, expression(chi^2), cex=1.75, line=2.5)
backgroundCol<- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
results<-read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<-results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds<-c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundsCol<-c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <-apply(counts, 1, calcChi)
plotChis(counts)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1<- simPop(Popsize=50, nGenerations=100, initial_p=0.5, h=1, s=0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type= "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend=c("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plotFit( nruns=10, n=50, ngens=100, init_p=0.5, h=1, s=0)
dev.off()
par(mar=c(1, 1, 1, 1))
par("mar")
graphics.off()
Expectation<-c(10, 10, 10, 10)
Observed<-c(15, 15, 5, 5)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Observed<-c(5, 0, 0, 35)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Observed<-c(2, 3, 10, 30)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
results<-read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<-results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds<-c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundsCol<-c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <-apply(counts, 1, calcChi)
plotChis(counts)
Avg<-mean(Chisqs)
backgroundAvgs<-tapply(Chisqs, results[,3], mean)
propSig<-length(which(Chisqs>11.70))/length(Chisqs)
percSig<-round(100 * propSig)
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
hist (Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
plot (1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis (2, at = 1:length(backgrounds), labels = backgrounds)
mtext (side=1, expression(chi^2), cex=1.75, line=2.5)
backgroundCol<- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
counter <- 1
for (i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist (Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline( v=11.70, lty=2, lwd=2, col='black')
Simulation<-simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit<-c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit<-c(00.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit)<- 1:6
Simulation5<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0, 0, 0, 0.25))
Fit<-c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit)<- 1:6
Simulation6<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0, 0, 0, 0.25))
mtext(side=2, at=8, line=0, "sel. sim.")
Simulation7<-c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 0, 0.25))
Simulation7<-c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
q()
model<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
q()
install.packages("learnPopGen")
install.packages("coala")
install.packages("phytools")
library("learnPopGen")
library("coala")
library("phytools")
model<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats<-smodel<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats<-simulate(model, nsim=1)
Diversity<-stats$pi
Nloci<-length(stats$trees)
t1<- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Age1<- max(nodeHeights(t1))
t2<- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1,t2)
t1_1<- read.tree(text=stats$trees[[1]][1])
t1_2<-read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
for(locus in 1:Nloci {
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees) {
outPhy<- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy<- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
outPhy<- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
par(mfrow=c(1,1))
densityTree(outPhy)
model3<- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
stats<- simulate(model3, nsim=40)
mean_pi<- sapply(stats, funciton(x) mean(x$pi))
theta<- sapply(stats, funciton(x) x$pars[["theta"]])
coala
mean_pi<-sapply(stats, function(x) mean(x$pi))
theta<- sapply(stats, function(x) x$pars[["theta"]])
install.packages("learnPopGen")
install.packages("coala")
install.packages("phytools")
library("learnPopGen")
library("coala")
library("phytools")
coalescent.plot()
?coalescent.plot
pdf('r.05-Question1.pdf', height=5, width=5)
pdf('r.05-Question2.pdf', height=5, width=5)
coalescent.plot(n=20, ngen=20, colors=NULL)
dev.off()
pdf('r.05-Question3.pdf', height=5, width=5)
coalescent.plot( n=10, ngen=1, colors=NULL)
coalescent.plot(n=10, ngen=5, colors=NULL)
dev.off()
model3<- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
stats<- simulate(model3, nsim=40)
mean_pi<-sapply(stats, function(x) mean(x$pi))
theta<- sapply(stats, function(x) x$pars[["theta"]])
pdf('r05-Model3Graph.pdf', height=5, width=5)
plot(mean_pi)
plot(theta)
plot(mean_pi, theta, xlab='Diversity', ylab='Mutation Rate', pch=16, cex=1.3, col='black', main='Diversity Due to Varied Mutation Rate')
abline(lm(mean_pi ~ theta), col='red')
dev.off()
help(feat_selection)
install.packages('phyclust')
library('phyclust')
activate_ms(priority = 400)
activate_msms(jar = NULL, java = NULL, priority = 400, download = TRUE)
model4 <- coal_model(c(13, 18)) +
feat_selection(
strength_AA = 0,
strength_Aa = 0, 
strength_aa = 1,
strength_A = NULL,
population = 1,
time = '1',
start = TRUE,
start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_selection(
strength_AA = 0,
strength_Aa = 1, 
strength_aa = 0,
strength_A = NULL,
population = 2,
time = '1',
start = TRUE,
start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(array(c(2,5)))
sumstat_nucleotide_div() +
sumstat_trees() 
activate_ms(priority = 100)
activate_msms(priority = 500, download = TRUE)
model4 <- coal_model(c(13, 18), loci_number = 10, loci_length = 1000, ploidy = 2) +
feat_selection(10, time = 1, population = 1) +
feat_selection(25, time = 1, population = 2) +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
check_model(model4)
list_simulators()
activate_scrm(priority = 400)
stat2 <- simulate(model4) 
stat2 <- simulate(model4, nsim = 40)
Diversity2 <- stat2$pi
q()
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Project\\Project\\')
Data <- read.csv('data.csv', stringsAsFactors=F)
head(Data)
q()
