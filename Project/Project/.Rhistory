mtext (side=1, expression(chi^2), cex=1.75, line=2.5)
backgroundCol<- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
results<-read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<-results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds<-c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundsCol<-c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <-apply(counts, 1, calcChi)
plotChis(counts)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1<- simPop(Popsize=50, nGenerations=100, initial_p=0.5, h=1, s=0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type= "l", xlab="generation", ylab="allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend=c("a", "b"), col=c("black", "red"), lwd=2, bty="n")
plotFit( nruns=10, n=50, ngens=100, init_p=0.5, h=1, s=0)
dev.off()
par(mar=c(1, 1, 1, 1))
par("mar")
graphics.off()
Expectation<-c(10, 10, 10, 10)
Observed<-c(15, 15, 5, 5)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Observed<-c(5, 0, 0, 35)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
Observed<-c(2, 3, 10, 30)
Chisq<- sum(((Expectation- Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside=T, main=bquote(chi^2 ~ "=" ~.(Chisq)), legend.text=c("expected", "observed"))
results<-read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors=F)
counts<-results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds<-c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundsCol<-c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisqs <-apply(counts, 1, calcChi)
plotChis(counts)
Avg<-mean(Chisqs)
backgroundAvgs<-tapply(Chisqs, results[,3], mean)
propSig<-length(which(Chisqs>11.70))/length(Chisqs)
percSig<-round(100 * propSig)
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
hist (Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par (las=1, mar=c (4, 4, 1, 1), mgp=c (2, 0.5, 0), tck = -0.01, cex.axis = 1)
plot (1, 1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis (2, at = 1:length(backgrounds), labels = backgrounds)
mtext (side=1, expression(chi^2), cex=1.75, line=2.5)
backgroundCol<- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
counter <- 1
for (i in backgrounds) {
Data <- Chisqs[which(results[,3] == i)]
addHist (Y=counter, Dat=Data, Color=backgroundCol[counter])
counter <- counter + 1
}
abline( v=11.70, lty=2, lwd=2, col='black')
Simulation<-simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line=0, "simulated")
abline(v=11.70, lty=2, lwd=2)
Fit<-c(1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation2<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0, 0, 0, 0.25))
Fit<-c(00.1, 1, 1, 1, 1, 1)
names(Fit)<- 1:6
Simulation3<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation3, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit)<- 1:6
Simulation4<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation4, Color=rgb(0, 0, 0, 0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit)<- 1:6
Simulation5<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0, 0, 0, 0.25))
Fit<-c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit)<- 1:6
Simulation6<-simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation6, Color=rgb(0, 0, 0, 0.25))
mtext(side=2, at=8, line=0, "sel. sim.")
Simulation7<-c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 0, 0.25))
Simulation7<-c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist(Y=8, Dat=Simulation7, Color=rgb(0, 0, 1, 0.25))
q()
model<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
q()
install.packages("learnPopGen")
install.packages("coala")
install.packages("phytools")
library("learnPopGen")
library("coala")
library("phytools")
model<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats<-smodel<- coal_model(sample_size =5, loci_number=10, loci_length=500, ploidy =2) +
feat_mutation(10) +
feat_recombination(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stats<-simulate(model, nsim=1)
Diversity<-stats$pi
Nloci<-length(stats$trees)
t1<- read.tree(text=stats$trees[[1]][1])
plot(t1)
axisPhylo()
Age1<- max(nodeHeights(t1))
t2<- read.tree(text=stats$trees[[2]][1])
plot(t2)
axisPhylo()
par(mfrow=c(1,2))
plot(t1)
axisPhylo()
plot(t2)
axisPhylo()
compare.chronograms(t1,t2)
t1_1<- read.tree(text=stats$trees[[1]][1])
t1_2<-read.tree(text=stats$trees[[1]][2])
compare.chronograms(t1_1, t1_2)
for(locus in 1:Nloci {
ntrees<-length(stats$trees[[locus]])
for(n in 1:ntrees) {
outPhy<- read.tree(text=stats$trees[[locus]][n])
}
else {
outPhy<- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
}
}
outPhy<- ape:::c.phylo(outPhy, read.tree(text=stats$trees[[locus]][n]))
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
par(mfrow=c(1,1))
densityTree(outPhy)
model3<- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
stats<- simulate(model3, nsim=40)
mean_pi<- sapply(stats, funciton(x) mean(x$pi))
theta<- sapply(stats, funciton(x) x$pars[["theta"]])
coala
mean_pi<-sapply(stats, function(x) mean(x$pi))
theta<- sapply(stats, function(x) x$pars[["theta"]])
install.packages("learnPopGen")
install.packages("coala")
install.packages("phytools")
library("learnPopGen")
library("coala")
library("phytools")
coalescent.plot()
?coalescent.plot
pdf('r.05-Question1.pdf', height=5, width=5)
pdf('r.05-Question2.pdf', height=5, width=5)
coalescent.plot(n=20, ngen=20, colors=NULL)
dev.off()
pdf('r.05-Question3.pdf', height=5, width=5)
coalescent.plot( n=10, ngen=1, colors=NULL)
coalescent.plot(n=10, ngen=5, colors=NULL)
dev.off()
model3<- coal_model(10, 50) +
feat_mutation(par_prior("theta", sample.int(100, 1))) +
sumstat_nucleotide_div()
stats<- simulate(model3, nsim=40)
mean_pi<-sapply(stats, function(x) mean(x$pi))
theta<- sapply(stats, function(x) x$pars[["theta"]])
pdf('r05-Model3Graph.pdf', height=5, width=5)
plot(mean_pi)
plot(theta)
plot(mean_pi, theta, xlab='Diversity', ylab='Mutation Rate', pch=16, cex=1.3, col='black', main='Diversity Due to Varied Mutation Rate')
abline(lm(mean_pi ~ theta), col='red')
dev.off()
help(feat_selection)
install.packages('phyclust')
library('phyclust')
activate_ms(priority = 400)
activate_msms(jar = NULL, java = NULL, priority = 400, download = TRUE)
model4 <- coal_model(c(13, 18)) +
feat_selection(
strength_AA = 0,
strength_Aa = 0, 
strength_aa = 1,
strength_A = NULL,
population = 1,
time = '1',
start = TRUE,
start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_selection(
strength_AA = 0,
strength_Aa = 1, 
strength_aa = 0,
strength_A = NULL,
population = 2,
time = '1',
start = TRUE,
start_frequency = 5e-04,
Ne = 10000,
position = 0.5,
force_keep = TRUE,
locus_group = 'all') +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(array(c(2,5)))
sumstat_nucleotide_div() +
sumstat_trees() 
activate_ms(priority = 100)
activate_msms(priority = 500, download = TRUE)
model4 <- coal_model(c(13, 18), loci_number = 10, loci_length = 1000, ploidy = 2) +
feat_selection(10, time = 1, population = 1) +
feat_selection(25, time = 1, population = 2) +
feat_size_change(0.5,
population = 1, 
time = '1', 
locus_group = 'all') +
feat_size_change(0.1, 
population = 2, 
time = '2', 
locus_group = 'all') +
feat_migration(1.2, 
pop_to = 1, 
pop_from = 2, 
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
check_model(model4)
list_simulators()
activate_scrm(priority = 400)
stat2 <- simulate(model4) 
stat2 <- simulate(model4, nsim = 40)
Diversity2 <- stat2$pi
q()
source("https://jonsmitchell.com/code/reformatData07.R")
source("https://jonsmitchell.com/code/simFxn.R")
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
dYear <- c()
dAlleles <- c()
for(i in 3:ncol(overalFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
]
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
source("https://jonsmitchell.com/code/reformatData07.R")
source("https://jonsmitchell.com/code/simFxn.R")
plot(1,1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x)x-x[1]
plot(1,1, type="n", xlim=c(1998, 2013) ylim=c(-0.25, 0.25))
s <- apply(rescaleFreq, 2, function(x) lines(overalFreq[,1], x, col=rgb(0,0,0,0.01)))
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
dYear <- c()
dAlleles <- c()
for(i in 3:ncol(overalFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
}
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
q()
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Project\\Project\\')
Data <- read.csv('data.csv', stringsAsFactors=F)
Surv <- Data[,7]
Temp <- Data[,5]
PercentHatching <- tapply(Surv, Temp, function(x) sum(x)/length(x))
MeanHatching <- tapply(Surv, Temp, mean)
SDHatching <- tapply(Surv,Temp,sd)
Temps <- 1:3
RealTemp <- c(11.4, 17.7, 24) # Actual temperature from the paper for treatments 1, 2, and 3 (cold, benign, hot)
RealTemps <- RealTemp[Temp]
TotalData <- cbind(RealTemp, PercentHatching)
plot(as.numeric(names(MeanHatching)), MeanHatching, ylim=c(0,1))
silent <- sapply(1:length(MeanHatching), function(x) segments(Temps[x], MeanHatching[x]-SDHatching[x], Temps[x], MeanHatching[x]+SDHatching[x]))
# For data2
Data <- read.csv('data2.csv', stringsAsFactors=F)
Data2Temp <- 25 # Actual temperature the eggs in the Neither shcoked treatment from paper 2 were raised at
NeitherShocked <- which(Data$Treatment == "Neither shocked")
Hatching2 <- Data[NeitherShocked,5]
SummaryData2 <- cbind(rep(Data2Temp, length(Hatching2)), Hatching2)
TotalData <- rbind(TotalData, SummaryData2)
# For data3
Data <- read.csv('data3.csv', stringsAsFactors=F)
Surv3<- Data[,3]
Temp3<-Data[,1]
head(Data)
SummaryData3<-cbind(Temp3, Surv3)
head(SummaryData3)
TotalData <- rbind(TotalData, SummaryData3)
#for data4
Data <- read.table('data4.txt', sep="\t", stringsAsFactors=F, header=T)
head(Data)
SummaryData4<-cbind(Data[,1], Data[,3])
TotalData <- rbind(TotalData, SummaryData4)
head(SummaryData4)
#For data5
Data <- read.csv('data5.csv', stringsAsFactors=F)
Surv5<- Data[,4]
Temp5<-Data[,3]
head(Data)
SummaryData5<-cbind(Temp5, Surv5)
TotalData <- rbind(TotalData, SummaryData5)
#For data6
Data <- read.csv('data6.csv', stringsAsFactors=F)
Surv6<- Data[,12]
Temp6<-Data[,1]
head(Data)
SummaryData6<-cbind(Temp6, Surv6)
head(SummaryData6)
TotalData <- rbind(TotalData, SummaryData6)
plot(TotalData[,1], TotalData[,2], xlab="temperature", ylab="proportion hatching")
abline(lm(TotalData[,2]~TotalData[,1]), col="black", lty=1)
MeanViability<-(Surv3, Surv6, Surv5, Hatching2, mean)
MeanViability<-mean(Surv3, Surv6, Surv5, Hatching2)
head(TotalData)\
head(TotalData)
MeanViability<-Mean(PercentHatching)
MeanViability<-mean(PercentHatching)
MeanViability<-mean(PercentHatching)
head(MeanViability)
SDViability<-sd(PercentHatching)
head(SDViability)
ModeTemperature<-mode(Temperature)
ModeTemperature<-mode(RealTemp)
head(ModeTemperature)
AverageTemperature<-man(RealTemp)
head(AverageTemperature)
head(ModeTemperature)
AverageTemperature<-mean(RealTemp)
head(AverageTemperature)
q()
setwd('C:\\Users\\Skyler Richmond\\Desktop\\Evolution\\Project\\Project\\')
Data <- read.csv('data.csv', stringsAsFactors=F)
Surv <- Data[,7]
Temp <- Data[,5]
PercentHatching <- tapply(Surv, Temp, function(x) sum(x)/length(x))
MeanHatching <- tapply(Surv, Temp, mean)
SDHatching <- tapply(Surv,Temp,sd)
Temps <- 1:3
RealTemp <- c(12.8, 24, 25.6) # Actual temperature from the paper for treatments 1, 2, and 3 (cold, benign, hot)
RealTemps <- RealTemp[Temp]
TotalData <- cbind(RealTemp, PercentHatching)
plot(as.numeric(names(MeanHatching)), MeanHatching, ylim=c(0,1))
silent <- sapply(1:length(MeanHatching), function(x) segments(Temps[x], MeanHatching[x]-SDHatching[x], Temps[x], MeanHatching[x]+SDHatching[x]))
# For data2
Data <- read.csv('data2.csv', stringsAsFactors=F)
Data2Temp <- 25 # Actual temperature the eggs in the Neither shcoked treatment from paper 2 were raised at
NeitherShocked <- which(Data$Treatment == "Neither shocked")
Hatching2 <- Data[NeitherShocked,5]
SummaryData2 <- cbind(rep(Data2Temp, length(Hatching2)), Hatching2)
TotalData <- rbind(TotalData, SummaryData2)
#for data4
Data <- read.table('data4.txt', sep="\t", stringsAsFactors=F, header=T)
head(Data)
SummaryData4<-cbind(Data[,1], Data[,3])
TotalData <- rbind(TotalData, SummaryData4)
head(SummaryData4)
#For data5
Data <- read.csv('data5.csv', stringsAsFactors=F)
Surv5<- Data[,4]
Temp5<-Data[,3]
head(Data)
SummaryData5<-cbind(Temp5, Surv5)
TotalData <- rbind(TotalData, SummaryData5)
#For data6
Data <- read.csv('data6.csv', stringsAsFactors=F)
Surv6<- Data[,12]
Temp6<-Data[,1]
head(Data)
SummaryData6<-cbind(Temp6, Surv6)
head(SummaryData6)
TotalData <- rbind(TotalData, SummaryData6)
plot(TotalData[,1], TotalData[,2], xlab="Temperature (Celsius)", ylab="Proportion hatching (%)")
abline(lm(TotalData[,2]~TotalData[,1]), col="black", lty=1)
MeanViability<-mean(Surv3, Surv6, Surv5, Hatching2)
head(TotalData)
MeanViability<-mean(PercentHatching)
head(MeanViability)
SDViability<-sd(PercentHatching)
head(SDViability)
ModeTemperature<-mode(RealTemp)
head(ModeTemperature)
AverageTemperature<-mean(RealTemp)
head(AverageTemperature)
install.packages("ggpubr")
library(ggpubr)
ggscatter(TotalData, x = "RealTemp", y = "PercentHatching", 
          add = "reg.line", conf.int = TRUE, 
          cor.coef = TRUE, cor.method = "pearson",
          xlab = "Temperature (Celsius)", ylab = "Proportion hatching (%)")
linearMod<-lm()
summary(linearMod)
lm(formula=)
Data <- read.csv('data.csv', stringsAsFactors=F)
Surv <- Data[,7]
Temp <- Data[,5]
PercentHatching <- tapply(Surv, Temp, function(x) sum(x)/length(x))
MeanHatching <- tapply(Surv, Temp, mean)
SDHatching <- tapply(Surv,Temp,sd)
Temps <- 1:3
RealTemp <- c(12.8, 24, 25.6) # Actual temperature from the paper for treatments 1, 2, and 3 (cold, benign, hot)
RealTemps <- RealTemp[Temp]
TotalData <- cbind(RealTemp, PercentHatching)
plot(as.numeric(names(MeanHatching)), MeanHatching, ylim=c(0,1))
silent <- sapply(1:length(MeanHatching), function(x) segments(Temps[x], MeanHatching[x]-SDHatching[x], Temps[x], MeanHatching[x]+SDHatching[x]))
# For data2
Data <- read.csv('data2.csv', stringsAsFactors=F)
Data2Temp <- 25 # Actual temperature the eggs in the Neither shcoked treatment from paper 2 were raised at
NeitherShocked <- which(Data$Treatment == "Neither shocked")
Hatching2 <- Data[NeitherShocked,5]
SummaryData2 <- cbind(rep(Data2Temp, length(Hatching2)), Hatching2)
TotalData <- rbind(TotalData, SummaryData2)
# For data3
Data <- read.csv('data3.csv', stringsAsFactors=F)
Surv3<- Data[,5]
Temp3<-Data[,3]
head(Data)
SummaryData3<-cbind(Temp3, Surv3)
head(SummaryData3)
TotalData <- rbind(TotalData, SummaryData3)
#for data4
Data <- read.table('data4.txt', sep="\t", stringsAsFactors=F, header=T)
head(Data)
SummaryData4<-cbind(Data[,1], Data[,3])
TotalData <- rbind(TotalData, SummaryData4)
head(SummaryData4)
#For data5
Data <- read.csv('data5.csv', stringsAsFactors=F)
Surv5<- Data[,4]
Temp5<-Data[,3]
head(Data)
SummaryData5<-cbind(Temp5, Surv5)
TotalData <- rbind(TotalData, SummaryData5)
#For data6
Data <- read.csv('data6.csv', stringsAsFactors=F)
Surv6<- Data[,12]
Temp6<-Data[,1]
head(Data)
SummaryData6<-cbind(Temp6, Surv6)
head(SummaryData6)
TotalData <- rbind(TotalData, SummaryData6)
plot(TotalData[,1], TotalData[,2], xlab="Temperature (Celsius)", ylab="Proportion hatching (%)")
abline(lm(TotalData[,2]~TotalData[,1]), col="black", lty=1)
MeanViability<-mean(Surv3, Surv6, Surv5, Hatching2)
head(TotalData)
MeanViability<-mean(PercentHatching)
head(MeanViability)
SDViability<-sd(PercentHatching)
head(SDViability)
ModeTemperature<-mode(RealTemp)
head(ModeTemperature)
AverageTemperature<-mean(RealTemp)
q()
